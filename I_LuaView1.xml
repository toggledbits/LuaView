<?xml version="1.0" encoding="UTF-8"?>
<implementation>
    <functions>
        -- --------------------------------------------------------------------
        -- LuaView, Patrick H. Rigney (rigpapa).
        -- Completely and totally open source. Contributions welcome!
        -- --------------------------------------------------------------------
        function startLuaView(dev)
            luup.log("LuaView 1.7develop-20005 starting.")
            isOpenLuup = luup.openLuup ~= nil
            luup.variable_set( "urn:toggledbits-com:serviceId:LuaView1", "isOpenLuup", isOpenLuup and "1" or "0", dev )
            if luup.attr_get( "device_json", dev ) ~= "D_LuaView1.json" then
                luup.log("LuaView resetting static JSON file, Luup reload necessary...")
                luup.attr_set( "device_json", "D_LuaView1.json", dev )
                luup.reload()
            end
            if luup.variable_get( "urn:toggledbits-com:serviceId:LuaView1", "AceOptions", dev ) == nil then
                luup.variable_set( "urn:toggledbits-com:serviceId:LuaView1", "AceOptions", "", dev )
            end
            luup.register_handler("LuaViewRequestHandler", "LuaView")
            return true, "OK", "LuaView"
        end

        function LuaViewRequestHandler( lul_request, lul_parameters, lul_outputformat )
            local isOpenLuup = luup.variable_get( "urn:toggledbits-com:serviceId:LuaView1", "isOpenLuup", dev ) or "0"
            if lul_parameters.action == "saveStartupLua" then
                local lua = lul_parameters.lua or ""
                if lua == "" or isOpenLuup ~= "0" then
                    luup.attr_set( "StartupCode", lua, 0 )
                    luup.attr_set( "encoded_lua", 0, 0 )
                else
                    local mime = require("mime")
                    luup.attr_set( "StartupCode", mime.b64( lua ), 0 )
                    luup.attr_set( "encoded_lua", 1, 0 )
                end
                luup.log("LuaView: updated startup Lua")
                return "OK", "text/plain"
             elseif lul_parameters.action == "testlua" then
                local _,err = loadstring( lul_parameters.lua or "" )
                local json = require "dkjson"
                if err then
                    return json.encode{ status=false, message=err }, "application/json"
                end
                return json.encode{ status=true, message="Lua OK" }, "application/json"
             elseif lul_parameters.action == "alive" then
                local json = require "dkjson"
                return json.encode{ status=true }, 'application/json'
             elseif lul_parameters.action == "log" then
                local firstline = tonumber( lul_parameters.first ) or 1
                local count = tonumber( lul_parameters.count ) or 250
                local cmd = string.format("awk 'NR&gt;=%d &amp;&amp; NR&lt;%d { print }' &lt; /var/log/cmh/LuaUPnP.log",
                    firstline, firstline + count)
                local f = io.popen( cmd )
                if f then
                    local lines = string.format("$LOC:%d:\n", firstline) .. f:read("*a")
                    f:close()
                    return lines, "text/plain"
                else
                    return "ERROR\nLOG READ FAILED\n", "text/plain"
                end
             elseif lul_parameters.action == "rotatelogs" then
                os.execute( "/usr/bin/Rotate_Logs.sh 1" )
                return "OK", "text/plain"
             elseif lul_parameters.action == "blank" then
                return '&lt;html&gt;&lt;body bgcolor="white"&gt;Please wait... collecting data&lt;/body&gt;&lt;/html&gt;', "text/html"
             end
             return "ERROR\nInvalid request\n", "text/plain"
        end
    </functions>
    <startup>startLuaView</startup>
    <actionList>
    </actionList>
</implementation>
